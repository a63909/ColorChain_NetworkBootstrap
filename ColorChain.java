package com.example.tamarashadow.core;
import static com.example.tamarashadow.core.ColorTouchMiner.*;
import static com.example.tamarashadow.core.ColorTouchMiner.getBlockchain;
import static com.example.tamarashadow.core.ColorTouchMiner.getWallet;

import android.content.Context;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;
import com.example.tamarashadow.core.ColorInventory;


public class ColorChain {
    private static List<ColorBlock> blockchain = new ArrayList<>();


    // üîí –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    private static List<ColorToken> tokens = new ArrayList<>();

    public static List<ColorBlock> getChain() {
        return blockchain;
    }


    private static int lbaPCount = 0;

    // üîó –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –≤ —Ü–µ–ø–æ—á–∫–µ
    private final List<ColorBlock> chain;

    public ColorChain() {
        this.chain = new ArrayList<>();
        chain.add(createGenesisBlock());
    }

    public static boolean containsHash(String hash) {
        for (ColorBlock block : getBlockchain()) {
            if (block.getBlockHash().equals(hash)) {
                return true;
            }
        }
        return false;
    }


    private static List<ColorBlockPoW> powChain = new ArrayList<>();

    public static void addBlock(ColorBlockPoW block) {
        powChain.add(block);
        System.out.println("üß± –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ü–µ–ø—å. –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: " + powChain.size());
    }


    // ‚úÖ –ü–æ–¥ Android ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    public static void loadTokens(Context context) {
        ColorInventory.loadTokens(context);
    }

    // üß¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞
    private ColorBlock createGenesisBlock() {
        List<ColorDTO> genesisColors = new ArrayList<>();
        genesisColors.add(new ColorDTO(255, 255, 255, 0, 0));

        try {
            ColorWallet wallet = ColorWallet.loadOrCreate();
            return new ColorBlock("0", genesisColors, wallet.getPublicKeyString());
        } catch (Exception e) {
            throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫", e);
        }
    }


    public static void createGenesisToken(String ownerId) {
        ColorToken origin = ColorToken.createOriginToken(ownerId);
        tokens.add(origin);
        System.out.println("[GENESIS] üå± OriginToken —Å–æ–∑–¥–∞–Ω: " + origin);
    }




    public static int getBalanceForCurrentMiner() {
        // –í–†–ï–ú–ï–ù–ù–´–ô –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞–π–Ω–µ—Ä–∞
        String minerId = "default-miner"; // –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
        return getBalanceForMiner(minerId);
    }

    public static int getBalanceForMiner(String minerId) {
        int total = 0;
        for (ColorToken token : tokens) {
            if (token.getOwnerId().equals(minerId)) {
                total += token.getStrength();// –∏–ª–∏ token.getValue()
            }
        }
        return total;
    }



    // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞
    public void addBlock(List<ColorDTO> colorDNA) {
        try {
            ColorWallet wallet = ColorWallet.loadOrCreate();
            ColorBlock lastBlock = getLastBlock();
            ColorBlock newBlock = new ColorBlock(lastBlock.getBlockHash(), colorDNA, wallet.getPublicKeyString());
            chain.add(newBlock);
        } catch (Exception e) {
            Log.e("ColorChain", "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞: " + e.getMessage());
        }
    }

    // ‚ûï –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤—Å—Ç–∞–≤–∫–∞
    public void addBlock(List<ColorDTO> colorDNA, int x, int y, String phrase, long timestamp) {
        try {
            ColorWallet wallet = ColorWallet.loadOrCreate();
            ColorBlock lastBlock = getLastBlock();
            ColorBlock newBlock = new ColorBlock(lastBlock.getBlockHash(), colorDNA, wallet.getPublicKeyString());
            chain.add(newBlock);
        } catch (Exception e) {
            Log.e("ColorChain", "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞: " + e.getMessage());
        }
    }

    // üì• –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    public static void addToken(ColorToken token) {
        tokens.add(token);

        if (token.isLbaP()) {
            lbaPCount++;
        }
    }

    public static int getLbaPCount() {
        return lbaPCount;
    }

    // üì§ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
    public static List<ColorToken> getTokens() {
        return tokens;
    }

    // ‚ôªÔ∏è –ó–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
    public static void setTokens(List<ColorToken> newTokens) {
        tokens = newTokens;
    }

    // üß± –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
    public ColorBlock getLastBlock() {
        return chain.get(chain.size() - 1);
    }

    // üì¶ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏
    public List<ColorBlock> getBlocks() {
        return chain;
    }

    // üñ®Ô∏è –í—ã–≤–æ–¥ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ (–≤ –ª–æ–≥)
    public void printChain() {
        for (ColorBlock block : chain) {
            Log.d("ColorChain", block.toString());
        }

        Log.d("ColorChain", "=== –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ ===");
        for (ColorToken token : tokens) {
            Log.d("ColorChain", token.toString());
        }
    }
}
