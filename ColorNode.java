package com.example.tamarashadow.core;

import org.java_websocket.WebSocket;
import org.java_websocket.server.WebSocketServer;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;

public class ColorNode {
    private int port;
    private static List<String> peers = new ArrayList<>();
    private static ColorNode instance;

    private PeerServer server;

    // –°–∏–Ω–≥–ª—Ç–æ–Ω-–¥–æ—Å—Ç—É–ø
    public static ColorNode getInstance() {
        if (instance == null) {
            instance = new ColorNode(1001, new ArrayList<>());
        }
        return instance;
    }

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    public ColorNode(int port, List<String> peers) {
        this.port = port;
        ColorNode.peers = peers;
        instance = this;

        discoverPeers(); // –ê–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ

        ColorNodeManager.getInstance().setCurrentNode(this);
    }

    public static void printPeers() {
        System.out.println("[üåê] –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É–∑–ª—ã:");
        for (String peer : peers) {
            System.out.println(" - " + peer);
        }
    }

    public void connectToPeer(String ip, int port) {
        try {
            String target = ip + ":" + port;
            PeerClient client = new PeerClient(new URI("ws://" + target));
            client.connect();
            peers.add(target);
            System.out.println("[üîå] –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —É–∑–ª—É: " + target);
        } catch (Exception e) {
            System.out.println("[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∑–ª—É: " + ip + ":" + port);
        }
    }

    private void discoverPeers() {
        String localIp = NetworkUtils.getLocalIpAddress();
        if (localIp == null) {
            System.out.println("[‚ö†Ô∏è] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP.");
            return;
        }

        String base = localIp.substring(0, localIp.lastIndexOf(".") + 1);
        for (int i = 1; i <= 254; i++) {
            String target = base + i + ":1001";
            if (target.equals(localIp + ":1001")) continue;

            try {
                PeerClient client = new PeerClient(new URI("ws://" + target));
                client.connect();
                peers.add(target);
                System.out.println("[üîç] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: " + target);
            } catch (Exception ignored) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            }
        }
    }

    public void broadcast(String message) {
        for (WebSocket client : PeerClient.getAllClients()) {
            try {
                client.send(message);
            } catch (Exception e) {
                System.out.println("[üí•] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: " + e.getMessage());
            }
        }
    }

    public List<String> getPeers() {
        return peers;
    }
}
