package com.example.tamarashadow.core;

import java.util.*;
import com.example.tamarashadow.network.NodeManager;
import com.example.tamarashadow.network.NodeClient;

public class ColorTouchMiner {
    private static final List<ColorBlock> blockchain = new ArrayList<>();
    private static final Set<String> minedColors = new HashSet<>();
    private static final ColorWallet wallet = new ColorWallet();
    private static String prevHash = "0000000000000000";
    private static ColorToken currentToken = ColorToken.createOriginToken("system");

    public static int touch(ColorDTO color) {
        String colorCode = color.toSimpleString();

        if (isColorAlreadyMined(color)) {
            return 0;
        }

        System.out.println("[üé®] –ö–∞—Å–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞: " + colorCode);
        System.out.println("[‚öô] –ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞ –±–ª–æ–∫–∞...");

        ColorBlockPoW block = new ColorBlockPoW(prevHash, colorCode, color.getX(), color.getY(), System.currentTimeMillis(), "user");
        block.mine();
        blockchain.add(block);

        String json = "{"
                + "\"type\":\"newBlock\","
                + "\"hash\":\"" + block.getBlockHash() + "\","
                + "\"color\":\"" + block.getColorCode() + "\","
                + "\"miner\":\"" + block.getMinerId() + "\","
                + "\"timestamp\":" + block.getTimestamp()
                + "}";

        // ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ peer
        for (String peer : NodeManager.getKnownPeers()) {
            new Thread(() -> {
                try {
                    NodeClient.connectAndSend(peer, json);
                } catch (Exception e) {
                    System.out.println("[–¢–ê–ú–ê–†–ê] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–æ–∫ —É–∑–ª—É " + peer + ": " + e.getMessage());
                }
            }).start();
        }

        prevHash = block.getHash();

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
        currentToken.incrementStrength();

        // –≠–≤–æ–ª—é—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        currentToken.evolve();
        if (currentToken.isLbaP()) {
            System.out.println("üíé –¢–æ–∫–µ–Ω —Å—Ç–∞–ª LBU‚ÇΩ");
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∫–æ—à–µ–ª—ë–∫ (–æ–¥–∏–Ω —Ä–∞–∑)
        if (!wallet.getTokens().contains(currentToken)) {
            wallet.addToken(currentToken);
        }

        minedColors.add(colorCode);
        return 1;
    }

    public static boolean isColorAlreadyMined(ColorDTO color) {
        return minedColors.contains(color.toSimpleString());
    }

    public static void setOriginToken(ColorToken token) {
        currentToken = token;
        wallet.addToken(currentToken);
    }

    public static List<ColorBlock> getBlockchain() {
        return blockchain;
    }

    public static ColorWallet getWallet() {
        return wallet;
    }
}
