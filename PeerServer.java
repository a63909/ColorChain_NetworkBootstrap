package com.example.tamarashadow.core;

import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;

import java.net.InetSocketAddress;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class PeerServer extends WebSocketServer {

    private static final Set<WebSocket> activePeers = Collections.synchronizedSet(new HashSet<>());

    public PeerServer(InetSocketAddress address) {
        super(address);
    }

    @Override
    public void onOpen(WebSocket conn, ClientHandshake handshake) {
        activePeers.add(conn);
        System.out.println("[üåê] –ü—Ä–∏–Ω—è—Ç–æ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: " + conn.getRemoteSocketAddress());
    }

    @Override
    public void onClose(WebSocket conn, int code, String reason, boolean remote) {
        activePeers.remove(conn);
        System.out.println("[‚ùå] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: " + conn.getRemoteSocketAddress() + ", –ø—Ä–∏—á–∏–Ω–∞: " + reason);
    }

    @Override
    public void onMessage(WebSocket conn, String message) {
        System.out.println("[üì•] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + message);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–∫–æ–≤ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    }

    @Override
    public void onError(WebSocket conn, Exception ex) {
        System.out.println("[üí•] –û—à–∏–±–∫–∞: " + ex.getMessage());
    }

    @Override
    public void onStart() {
        System.out.println("[‚úÖ] PeerServer –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.");
    }

    public static Set<WebSocket> getActivePeers() {
        return activePeers;
    }
}
